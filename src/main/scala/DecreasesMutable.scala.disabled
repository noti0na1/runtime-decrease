object DecreasesStack:
  import scala.collection.mutable.Map
  val stack = Map[String, List[Any]]()

  def apply(key: String): Option[Any] = stack.get(key).flatMap(_.headOption)

  def set(key: String, value: Any): Unit =
    stack.get(key) match
      case Some(values) => stack.update(key, value :: values)
      case None         => stack.update(key, List(value))

  def pop(key: String): Unit =
    stack.get(key) match
      case Some(values) =>
        if values.tail.isEmpty then stack.remove(key)
        else stack.update(key, values.tail)
      case None => ()

// Easy to test two versions of Decreases
case class DecreaseState()

object EmptyDecreaseState:
  given DecreaseState = DecreaseState()

class NegativeMeasureException(msg: String) extends IllegalArgumentException(msg)

class NonDecreasingMeasureException(msg: String) extends IllegalArgumentException(msg)

def decreases[V: Ordering: ZeroValue, T](x: V)(using
    path: sourcecode.Enclosing
)(body: => T) =
  genericDecreases(path.value, x)(body)

def while_decreases[V: Ordering: ZeroValue, T](cond: => Boolean, x: => V)(using
    path: sourcecode.Enclosing,
    line: sourcecode.Line
)(body: => Unit): Unit =
  val name = path.value + "$while:" + line.value
  def recur: Unit =
    if cond then genericDecreases(name, x) { body; recur }
  recur

def genericDecreases[V: Ordering: ZeroValue, T](name: String, x: V)(body: => T) =
  import math.Ordering.Implicits.infixOrderingOps
  // println(s"decrease: ${name}, ${x}")
  if x < zero then
    throw NegativeMeasureException(
      s"decrease called with negative measure: ${x} at ${name}"
    )
  else
    DecreasesStack(name) match
      case Some(last) =>
        // println(s"last: ${last}, x: ${x}")
        if x >= last.asInstanceOf[V] then
          throw NonDecreasingMeasureException(
            s"decrease measure not decreased: ${last} <= ${x} at ${name}"
          )
      case None =>
      // println(s"first: ${x}")
    DecreasesStack.set(name, x)
    val result = body
    DecreasesStack.pop(name)
    result
